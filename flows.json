[
    {
        "id": "login-flow",
        "type": "tab",
        "label": "Authentication",
        "disabled": false,
        "info": ""
    },
    {
        "id": "environment-flow",
        "type": "tab",
        "label": "Environment",
        "disabled": false,
        "info": ""
    },
    {
        "id": "sleep-flow",
        "type": "tab",
        "label": "Sleep Tracking",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e3ede8339268118c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4e53723f2e405b89",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4c5f97a5f0e24b71",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e28f2d721c3e9a33",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cloud-sync-flow",
        "type": "tab",
        "label": "Cloud Sync (Firebase)",
        "disabled": false,
        "info": "Flow to continuously update a single JSON object to Firebase with sensor data from MQTT.",
        "env": []
    },
    {
        "id": "07391ca88541455f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "login-tab",
        "type": "ui_tab",
        "name": "Login",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "environment-tab",
        "type": "ui_tab",
        "name": "Environment",
        "icon": "fa-leaf",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "sleep-tab",
        "type": "ui_tab",
        "name": "Sleep",
        "icon": "fa-bed",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "login-group",
        "type": "ui_group",
        "name": "Login",
        "tab": "login-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "env-charts-group",
        "type": "ui_group",
        "name": "Environment Data",
        "tab": "environment-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "44790f209ca2adcd",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "sleep-charts-group",
        "type": "ui_group",
        "name": "Sleep Tracking Data",
        "tab": "sleep-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "923fa8921ff9b099",
        "type": "ui_group",
        "name": "",
        "tab": "44790f209ca2adcd",
        "order": 2,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "82d11885287ffda4",
        "type": "ui_spacer",
        "z": "4c5f97a5f0e24b71",
        "name": "spacer",
        "group": "923fa8921ff9b099",
        "order": 10,
        "width": 10,
        "height": 1
    },
    {
        "id": "0a2ef10a95340e8c",
        "type": "ui_spacer",
        "z": "4c5f97a5f0e24b71",
        "name": "spacer",
        "group": "923fa8921ff9b099",
        "order": 3,
        "width": 10,
        "height": 1
    },
    {
        "id": "cb7b12f45030da61",
        "type": "firebase config",
        "firebaseurl": "sleeptracker-us-db-default-rtdb",
        "loginType": "none"
    },
    {
        "id": "41cc11a7df67cd3b",
        "type": "gauth",
        "name": "iot-sleeptracker@iot-sleeptracker-auth.iam.gserviceaccount.com"
    },
    {
        "id": "new-firebase-config-sleeptracker",
        "type": "firebase config",
        "name": "SleepTracker Project Config",
        "firebaseurl": "https://sleeptracker-edb97-default-rtdb.asia-southeast1.firebasedatabase.app",
        "loginType": "none"
    },
    {
        "id": "login-form",
        "type": "ui_form",
        "z": "login-flow",
        "name": "Login Form",
        "label": "Sleep Tracking Clock - Login",
        "group": "login-group",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "",
        "topic": "login",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "auth-check"
            ]
        ]
    },
    {
        "id": "auth-check",
        "type": "function",
        "z": "login-flow",
        "name": "Authentication Check",
        "func": "// default is admin admin\nconst validUsers = global.get('auth')\n.reduce((prev, cur) => \n{prev[cur[0]]=cur[1]; return prev}, {});\n\nif (validUsers[msg.payload.username] === msg.payload.password) {\n    global.set('authenticated', true);\n    global.set('currentUser', msg.payload.username);\n    \n    msg.payload = {\n        message: 'Login successful! Please navigate to Dashboard tab to continue.',\n        user: msg.payload.username\n    };\n    \n    return [msg, { payload: true }];\n} else {\n    msg.payload = {\n        message: 'Invalid username or password. Please try again.'\n    };\n    return [msg, {payload:false}];\n}\n\nreturn null;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "login-result"
            ],
            [
                "85fdcc147da8bfad"
            ]
        ]
    },
    {
        "id": "login-result",
        "type": "ui_text",
        "z": "login-flow",
        "group": "login-group",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Login Status",
        "label": "Status:",
        "format": "{{msg.payload.message}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "53018ebdbe40bfe5",
        "type": "GSheet",
        "z": "login-flow",
        "creds": "41cc11a7df67cd3b",
        "method": "get",
        "action": "",
        "sheet": "1WDOMNNiOf1nsBzU2xE5ilt02XQw2OFqICUmibP-EJaA",
        "cells": "auth!A:B",
        "flatten": false,
        "name": "",
        "x": 590,
        "y": 40,
        "wires": [
            [
                "af22e085784a8977"
            ]
        ]
    },
    {
        "id": "1eedd04d08fcc9f0",
        "type": "inject",
        "z": "login-flow",
        "name": "init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "53018ebdbe40bfe5",
                "9764798f920afd99"
            ]
        ]
    },
    {
        "id": "af22e085784a8977",
        "type": "function",
        "z": "login-flow",
        "name": "set auth (all user data) ",
        "func": "global.set('auth', msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8c5d8ff8980647c3",
        "type": "ui_form",
        "z": "login-flow",
        "name": "Sign up Form",
        "label": "Sleep Tracking Clock - Register",
        "group": "login-group",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Sign up",
        "cancel": "",
        "topic": "login",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "95dee798fab15e56"
            ]
        ]
    },
    {
        "id": "8e15fefd68814e53",
        "type": "GSheet",
        "z": "login-flow",
        "creds": "41cc11a7df67cd3b",
        "method": "append",
        "action": "",
        "sheet": "1WDOMNNiOf1nsBzU2xE5ilt02XQw2OFqICUmibP-EJaA",
        "cells": "auth!A:B",
        "flatten": false,
        "name": "",
        "x": 650,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "95dee798fab15e56",
        "type": "function",
        "z": "login-flow",
        "name": "preprocess",
        "func": "const users = global.get('auth').map(ent => ent[0])\nif (users.includes(msg.payload.username)) {\nreturn [ null ,\n{\n    payload:{\n        message:'Username already exists'\n    }\n}\n]\n\n}\nreturn [{\n    payload:[msg.payload.username, msg.payload.password],\n},\n    {\n        payload: {\n            message: 'Success fully added user, proceed with login form above.'\n        }\n    }\n]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "8e15fefd68814e53",
                "53018ebdbe40bfe5"
            ],
            [
                "9a72ea69d87fdde7"
            ]
        ]
    },
    {
        "id": "9a72ea69d87fdde7",
        "type": "ui_text",
        "z": "login-flow",
        "group": "login-group",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Sign in status",
        "label": "Status:",
        "format": "{{msg.payload.message}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 640,
        "y": 400,
        "wires": []
    },
    {
        "id": "9b872422c56eb34f",
        "type": "ui_form",
        "z": "login-flow",
        "name": "Change Password",
        "label": "Change Password( login first) ",
        "group": "login-group",
        "order": 6,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "password": ""
        },
        "payload": "",
        "submit": "Change Password",
        "cancel": "",
        "topic": "login",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "5684b9ab710326d1"
            ]
        ]
    },
    {
        "id": "5684b9ab710326d1",
        "type": "function",
        "z": "login-flow",
        "name": "preprocess",
        "func": "if ( !global.get('authenticated'))\n    return [null , {payload:{message:'Please Login First'}}]\n\nlet username = global.get('currentUser');\nlet new_password = msg.payload.password\n\nconst authTable = Object\n.fromEntries(global.get('auth'));\n\nauthTable[username] =  new_password;\n\nreturn [ {payload:Object.entries(authTable)} ,\n{\n    payload:{\n        message:`Updated password for user ${username}`\n    }\n}\n]\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "a198ba0a8f7ee09b",
                "53018ebdbe40bfe5"
            ],
            [
                "7caaee4cdc5c195e"
            ]
        ]
    },
    {
        "id": "a198ba0a8f7ee09b",
        "type": "GSheet",
        "z": "login-flow",
        "creds": "41cc11a7df67cd3b",
        "method": "update",
        "action": "",
        "sheet": "1WDOMNNiOf1nsBzU2xE5ilt02XQw2OFqICUmibP-EJaA",
        "cells": "auth!A:B",
        "flatten": false,
        "name": "",
        "x": 650,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7caaee4cdc5c195e",
        "type": "ui_text",
        "z": "login-flow",
        "group": "login-group",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Change Password Status:",
        "label": "Status:",
        "format": "{{msg.payload.message}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 580,
        "wires": []
    },
    {
        "id": "2c384c56ed9619f9",
        "type": "inject",
        "z": "login-flow",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "authenticated",
        "payloadType": "global",
        "x": 260,
        "y": 200,
        "wires": [
            [
                "14aa901f182655de"
            ]
        ]
    },
    {
        "id": "1fd546bb2ea7ae73",
        "type": "ui_led",
        "z": "login-flow",
        "order": 2,
        "group": "login-group",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "9764798f920afd99",
        "type": "function",
        "z": "login-flow",
        "name": "reset Globs",
        "func": "const keys = global.keys();\nkeys.forEach(key => global.set(key, undefined));\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "14aa901f182655de",
        "type": "function",
        "z": "login-flow",
        "name": "function 1",
        "func": "msg.payload = msg.payload ? true : false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "1fd546bb2ea7ae73"
            ]
        ]
    },
    {
        "id": "85fdcc147da8bfad",
        "type": "link out",
        "z": "login-flow",
        "name": "on authenticated",
        "mode": "link",
        "links": [
            "739dd39314dd33ae",
            "36f97f797365140f",
            "d80143caf24d6e82"
        ],
        "x": 525,
        "y": 300,
        "wires": []
    },
    {
        "id": "humidity-chart",
        "type": "ui_chart",
        "z": "environment-flow",
        "name": "Humidity Chart",
        "group": "env-charts-group",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#4ecdc4",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "light-chart",
        "type": "ui_chart",
        "z": "environment-flow",
        "name": "Light Chart",
        "group": "env-charts-group",
        "order": 3,
        "width": 6,
        "height": 4,
        "label": "Light (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ffe66d",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "overall-quality-chart",
        "type": "ui_chart",
        "z": "environment-flow",
        "name": "Overall Quality Chart",
        "group": "env-charts-group",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "Overall Quality (pts)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#26a269",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "539377916580c123",
        "type": "mqtt in",
        "z": "environment-flow",
        "name": "",
        "topic": "23127302/sense",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "07391ca88541455f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 200,
        "wires": [
            [
                "2b274d557327cfb6",
                "ef3a2a42af7e349f"
            ]
        ]
    },
    {
        "id": "dfa7d43bac128aab",
        "type": "function",
        "z": "environment-flow",
        "name": "splitter",
        "func": "msg.payload.timestamp = msg.payload.timestamp * 1000 - 25200000;\n\nlet attrs = [\"temp\", \"humidity\", \"lightlevel\"];\nlet outputs = [];\n\nfor (let attr of attrs) {\n    outputs.push({\n        payload: msg.payload[attr],\n        timestamp: msg.payload.timestamp,\n        topic: attr,\n    });\n}\n\nif (attrs.every(attr => msg.payload[attr] !== undefined)) {\n    outputs.push({\n        payload:\n            Math.max(\n                0,\n                100 -\n                    Math.abs(msg.payload.temp - 24) -\n                    Math.abs(msg.payload.humidity - 60) -\n                    msg.payload.lightlevel\n            ) / 10,\n        timestamp: msg.payload.timestamp,\n        topic: \"overall\",\n    });\n} else\n    outputs.push(undefined);\n\nreturn outputs;",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "temp-chart",
                "ad92766c3e933c03"
            ],
            [
                "humidity-chart"
            ],
            [
                "light-chart"
            ],
            [
                "overall-quality-chart",
                "749a4c73a1387e12"
            ]
        ]
    },
    {
        "id": "2b274d557327cfb6",
        "type": "debug",
        "z": "environment-flow",
        "name": "mqtt in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 110,
        "y": 140,
        "wires": []
    },
    {
        "id": "ef3a2a42af7e349f",
        "type": "function",
        "z": "environment-flow",
        "name": "AuthSwitch",
        "func": "if (!global.get('authenticated')) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 240,
        "wires": [
            [
                "dfa7d43bac128aab",
                "b4ba8a977718dcad"
            ]
        ]
    },
    {
        "id": "749a4c73a1387e12",
        "type": "link out",
        "z": "environment-flow",
        "name": "envAvg",
        "mode": "link",
        "links": [
            "3258e9215e94e367"
        ],
        "x": 835,
        "y": 340,
        "wires": []
    },
    {
        "id": "90f977792246b3ad",
        "type": "debug",
        "z": "environment-flow",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 440,
        "wires": []
    },
    {
        "id": "bd8840c83e105f79",
        "type": "firebase auth",
        "z": "environment-flow",
        "name": "",
        "firebaseconfig": "cb7b12f45030da61",
        "x": 250,
        "y": 620,
        "wires": [
            [
                "3cfd358daedd6eae"
            ]
        ]
    },
    {
        "id": "3cfd358daedd6eae",
        "type": "debug",
        "z": "environment-flow",
        "name": "firebase config change announce",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 620,
        "wires": []
    },
    {
        "id": "64b2367854816417",
        "type": "firebase.on",
        "z": "environment-flow",
        "name": "",
        "firebaseconfig": "cb7b12f45030da61",
        "childpath": "",
        "atStart": true,
        "eventType": "value",
        "queries": [],
        "x": 250,
        "y": 560,
        "wires": [
            [
                "fe3426c3848b16eb",
                "b0698f60c961b98a"
            ]
        ]
    },
    {
        "id": "fe3426c3848b16eb",
        "type": "function",
        "z": "environment-flow",
        "name": "set history globs",
        "func": "global.set('history', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "b4ba8a977718dcad",
        "type": "function",
        "z": "environment-flow",
        "name": "append user",
        "func": "msg.childpath=global.get('currentUser');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 440,
        "wires": [
            [
                "0d553f6fb9e3b914"
            ]
        ]
    },
    {
        "id": "739dd39314dd33ae",
        "type": "link in",
        "z": "environment-flow",
        "name": "link in 2",
        "links": [
            "85fdcc147da8bfad"
        ],
        "x": 245,
        "y": 40,
        "wires": [
            [
                "f7b3d0e626490c42"
            ]
        ]
    },
    {
        "id": "f7b3d0e626490c42",
        "type": "function",
        "z": "environment-flow",
        "name": "get history",
        "func": "let history = global.get('history')\nlet userHistory = history[global.get('currentUser')];\nlet wait = 0;\nfor (let packet of Object.values(userHistory)){\n    setTimeout( () => node.send({ payload: packet }), wait * 100);\n    wait = wait + 1;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "dfa7d43bac128aab",
                "76a588eaee49ab15"
            ]
        ]
    },
    {
        "id": "76a588eaee49ab15",
        "type": "debug",
        "z": "environment-flow",
        "name": "firebase",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "b0698f60c961b98a",
        "type": "debug",
        "z": "environment-flow",
        "name": "get db",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "078112d3b3375953",
        "type": "inject",
        "z": "environment-flow",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "f7b3d0e626490c42"
            ]
        ]
    },
    {
        "id": "a8c43c3b2262c574",
        "type": "inject",
        "z": "environment-flow",
        "name": "clear chart",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "humidity-chart",
                "light-chart",
                "overall-quality-chart",
                "temp-chart"
            ]
        ]
    },
    {
        "id": "temp-chart",
        "type": "ui_chart",
        "z": "environment-flow",
        "name": "Temperature Chart",
        "group": "env-charts-group",
        "order": 1,
        "width": 6,
        "height": 4,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff6b6b",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ad92766c3e933c03",
        "type": "debug",
        "z": "environment-flow",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "0d553f6fb9e3b914",
        "type": "firebase modify",
        "z": "environment-flow",
        "name": "",
        "method": "push",
        "x": 740,
        "y": 440,
        "wires": []
    },
    {
        "id": "sleep-data-generator",
        "type": "function",
        "z": "sleep-flow",
        "name": "split",
        "func": "\n\n// msg.payload.start = msg.payload.start  - 25200000;\n// msg.payload.end = msg.payload.end  - 25200000;\n\nlet attrs = [\"start\", \"end\", \"duration\", \"quality\"];\nlet outputs = [];\n\noutputs.push({\n        payload: ( new Date(msg.payload.start/1000)).getHours(),\n        timestamp: msg.payload.end - 25200000,\n    });\n\noutputs.push({\n        payload: ( new Date(msg.payload.end/1000)).getHours(),\n        timestamp: msg.payload.end - 25200000,\n    });\noutputs.push({\n        payload: msg.payload.duration,\n        timestamp: msg.payload.end - 25200000,\n    });\n\noutputs.push({\n    payload: msg.payload.quality,\n    timestamp: msg.payload.end - 25200000,\n});\n\nreturn outputs;",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            [
                "start-time-chart",
                "37d845e9bf6a534d"
            ],
            [
                "end-time-chart"
            ],
            [
                "de5e16672ad3bca2"
            ],
            [
                "sleep-quality-chart",
                "2cda573f06ebdbc4"
            ]
        ]
    },
    {
        "id": "sleep-quality-chart",
        "type": "ui_chart",
        "z": "sleep-flow",
        "name": "Sleep Quality Chart",
        "group": "sleep-charts-group",
        "order": 1,
        "width": 6,
        "height": 4,
        "label": "Overall Quality (pts)",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#667eea",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "start-time-chart",
        "type": "ui_chart",
        "z": "sleep-flow",
        "name": "Starting Time Chart",
        "group": "sleep-charts-group",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Starting Time (h)",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#764ba2",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "end-time-chart",
        "type": "ui_chart",
        "z": "sleep-flow",
        "name": "Ending Time Chart",
        "group": "sleep-charts-group",
        "order": 3,
        "width": 6,
        "height": 4,
        "label": "Ending Time ",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#f093fb",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "movement-chart",
        "type": "ui_chart",
        "z": "sleep-flow",
        "name": "Movement Chart",
        "group": "sleep-charts-group",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "Movement During Sleep ",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff9a9e",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "9619c783e2a40352",
        "type": "debug",
        "z": "sleep-flow",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 80,
        "wires": []
    },
    {
        "id": "f889b40db530daa9",
        "type": "function",
        "z": "sleep-flow",
        "name": "append directory",
        "func": "msg.childpath=\"pir/\" + global.get('currentUser');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 620,
        "wires": [
            [
                "3403c4d8a27380f7"
            ]
        ]
    },
    {
        "id": "8b1be76b99d145aa",
        "type": "function",
        "z": "sleep-flow",
        "name": "AuthSwitch",
        "func": "if (!global.get('authenticated')) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 520,
        "wires": [
            [
                "f889b40db530daa9",
                "7c58d21181a67838"
            ]
        ]
    },
    {
        "id": "94f8a697934441ab",
        "type": "mqtt in",
        "z": "sleep-flow",
        "name": "",
        "topic": "sleeptracker/pir",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "07391ca88541455f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 520,
        "wires": [
            [
                "8b1be76b99d145aa"
            ]
        ]
    },
    {
        "id": "7c58d21181a67838",
        "type": "function",
        "z": "sleep-flow",
        "name": "preprocess",
        "func": "msg.payload.timestamp = msg.payload.timestamp*1000 - 7 *3600000;\nnode.send( {payload:100, timestamp:msg.payload.timestamp})\n\nnode.send( {payload:0, timestamp:msg.payload.timestamp})\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 500,
        "wires": [
            [
                "movement-chart"
            ]
        ]
    },
    {
        "id": "72d9562ed7bca841",
        "type": "inject",
        "z": "sleep-flow",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "2ad9f73558b6cfc0"
            ]
        ]
    },
    {
        "id": "2ad9f73558b6cfc0",
        "type": "function",
        "z": "sleep-flow",
        "name": "get pir history",
        "func": "let history = global.get('history')\nlet userHistory = history.pir[global.get('currentUser')];\nlet wait = 0;\nfor (let packet of Object.values(userHistory)){\n    setTimeout( () => node.send({ payload: packet }), wait * 100);\n    wait = wait + 1;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 420,
        "wires": [
            [
                "7c58d21181a67838"
            ]
        ]
    },
    {
        "id": "36f97f797365140f",
        "type": "link in",
        "z": "sleep-flow",
        "name": "link in 3",
        "links": [
            "85fdcc147da8bfad"
        ],
        "x": 205,
        "y": 360,
        "wires": [
            [
                "2ad9f73558b6cfc0"
            ]
        ]
    },
    {
        "id": "e62983a1baba24ab",
        "type": "function",
        "z": "sleep-flow",
        "name": "append directory",
        "func": "msg.childpath=\"sleepData/\" + global.get('currentUser');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "e0797b1ed7bc4763"
            ]
        ]
    },
    {
        "id": "da981848e565a806",
        "type": "function",
        "z": "sleep-flow",
        "name": "AuthSwitch",
        "func": "if (!global.get('authenticated')) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "e62983a1baba24ab",
                "sleep-data-generator",
                "9619c783e2a40352"
            ]
        ]
    },
    {
        "id": "2170a5fc0b395275",
        "type": "mqtt in",
        "z": "sleep-flow",
        "name": "",
        "topic": "ESP32-STC48613/sleep-data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "07391ca88541455f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 220,
        "wires": [
            [
                "da981848e565a806"
            ]
        ]
    },
    {
        "id": "8707720400d9573e",
        "type": "inject",
        "z": "sleep-flow",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "fac04470b1a02527"
            ]
        ]
    },
    {
        "id": "fac04470b1a02527",
        "type": "function",
        "z": "sleep-flow",
        "name": "get sleep-data history",
        "func": "let history = global.get('history')\nlet userHistory = history.sleepData[global.get('currentUser')];\nlet wait = 0;\nfor (let packet of Object.values(userHistory)){\n    setTimeout( () => node.send({ payload: packet }), wait * 100);\n    wait = wait + 1;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "sleep-data-generator"
            ]
        ]
    },
    {
        "id": "d80143caf24d6e82",
        "type": "link in",
        "z": "sleep-flow",
        "name": "link in 4",
        "links": [
            "85fdcc147da8bfad"
        ],
        "x": 175,
        "y": 40,
        "wires": [
            [
                "fac04470b1a02527"
            ]
        ]
    },
    {
        "id": "de5e16672ad3bca2",
        "type": "ui_chart",
        "z": "sleep-flow",
        "name": "Duration chart (minutes )",
        "group": "sleep-charts-group",
        "order": 3,
        "width": 6,
        "height": 4,
        "label": "Duration Chart (minutes)",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#f093fb",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1070,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c9375af12b505dc1",
        "type": "function",
        "z": "sleep-flow",
        "name": "function 2",
        "func": "node.send({\n    payload:{\n    \"start\": 1755440411000,\n    \"end\": 1755440411000,\n    \"duration\": 0,\n    \"quality\": 30\n} }\n)\n\nnode.send({\n    payload:{\n    \"start\": 1755940411000,\n    \"end\": 1755445411000,\n    \"duration\": 0,\n    \"quality\": 30\n} }\n)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "da981848e565a806"
            ]
        ]
    },
    {
        "id": "5d4c8b0353ea6447",
        "type": "inject",
        "z": "sleep-flow",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "c9375af12b505dc1"
            ]
        ]
    },
    {
        "id": "37d845e9bf6a534d",
        "type": "debug",
        "z": "sleep-flow",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 40,
        "wires": []
    },
    {
        "id": "2cda573f06ebdbc4",
        "type": "link out",
        "z": "sleep-flow",
        "name": "sleep quality avg",
        "mode": "link",
        "links": [
            "862cceed7a589cbd"
        ],
        "x": 985,
        "y": 280,
        "wires": []
    },
    {
        "id": "3403c4d8a27380f7",
        "type": "firebase modify",
        "z": "sleep-flow",
        "name": "",
        "method": "push",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "e0797b1ed7bc4763",
        "type": "firebase modify",
        "z": "sleep-flow",
        "name": "",
        "method": "push",
        "x": 940,
        "y": 360,
        "wires": []
    },
    {
        "id": "81786e1a6ffa6ed2",
        "type": "ui_button",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "group": "923fa8921ff9b099",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": false,
        "label": "alarm-toggle",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "iso",
        "payloadType": "date",
        "topic": "toggle-time",
        "topicType": "str",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "4c4f92a2bd23bf83"
            ]
        ]
    },
    {
        "id": "4eb1e901339c96ed",
        "type": "mqtt out",
        "z": "4c5f97a5f0e24b71",
        "name": "web-button-alarm-toggle",
        "topic": "esp32-STC48613/alarm-toggle",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "07391ca88541455f",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "c386d072d7ba57d6",
        "type": "ui_chart",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "group": "923fa8921ff9b099",
        "order": 12,
        "width": 17,
        "height": 9,
        "label": "History",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "9",
        "removeOlderPoints": "15",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a51d2d",
            "#613583",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 680,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ccda619479c0b739",
        "type": "ui_gauge",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "group": "923fa8921ff9b099",
        "order": 1,
        "width": 20,
        "height": 7,
        "gtype": "gage",
        "title": "Average Sleep Quality ",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 720,
        "y": 20,
        "wires": []
    },
    {
        "id": "947c4744d8311da6",
        "type": "ui_gauge",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "group": "923fa8921ff9b099",
        "order": 11,
        "width": "20",
        "height": "7",
        "gtype": "gage",
        "title": "Average Environment Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "73d02866264c5547",
        "type": "ui_button",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "group": "923fa8921ff9b099",
        "order": 6,
        "width": 10,
        "height": 1,
        "passthru": false,
        "label": "Set Alarm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "iso",
        "payloadType": "date",
        "topic": "time",
        "topicType": "msg",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "aa651b8b417f0873"
            ]
        ]
    },
    {
        "id": "48c5ed161b9fb210",
        "type": "join",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "2b071609943fe19c"
            ]
        ]
    },
    {
        "id": "c63314bb34d9b358",
        "type": "ui_numeric",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "label": "min",
        "tooltip": "",
        "group": "923fa8921ff9b099",
        "order": 5,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "alarm-input-min",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "59",
        "step": 1,
        "className": "",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "b319fb9bbedca6bb"
            ]
        ]
    },
    {
        "id": "4dced5d249571365",
        "type": "ui_numeric",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "label": "hour",
        "tooltip": "",
        "group": "923fa8921ff9b099",
        "order": 4,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "alarm-input-hour",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "23",
        "step": 1,
        "className": "",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "878bd7e0aa95eda4"
            ]
        ]
    },
    {
        "id": "b66a63aa1aa086bb",
        "type": "mqtt out",
        "z": "4c5f97a5f0e24b71",
        "name": "web-alarm-input",
        "topic": "esp32-STC48613/alarm-input",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "07391ca88541455f",
        "x": 900,
        "y": 320,
        "wires": []
    },
    {
        "id": "54b8aa2afbd3711a",
        "type": "ui_button",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "group": "923fa8921ff9b099",
        "order": 9,
        "width": 10,
        "height": 1,
        "passthru": false,
        "label": "Add Sleep",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "iso",
        "payloadType": "date",
        "topic": "payload",
        "topicType": "msg",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "71da7443399770ac"
            ]
        ]
    },
    {
        "id": "672f1cb1f5067d8d",
        "type": "join",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 530,
        "y": 460,
        "wires": [
            [
                "47c4f0cd61a182ad"
            ]
        ]
    },
    {
        "id": "1a4a5ec56311ccdd",
        "type": "ui_numeric",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "label": "min",
        "tooltip": "",
        "group": "923fa8921ff9b099",
        "order": 8,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "sleep-input-min",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "59",
        "step": 1,
        "className": "",
        "x": 230,
        "y": 500,
        "wires": [
            [
                "d67d9b8ef87d2675"
            ]
        ]
    },
    {
        "id": "d7ad36215472c5f2",
        "type": "ui_numeric",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "label": "hour",
        "tooltip": "",
        "group": "923fa8921ff9b099",
        "order": 7,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "sleep-input-hour",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "23",
        "step": 1,
        "className": "",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "2f968b0a1dfe1c5d"
            ]
        ]
    },
    {
        "id": "7fdcc03bfb161ce9",
        "type": "mqtt out",
        "z": "4c5f97a5f0e24b71",
        "name": "web-sleep-input",
        "topic": "esp32-STC48613/sleep-input",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "07391ca88541455f",
        "x": 880,
        "y": 460,
        "wires": []
    },
    {
        "id": "71da7443399770ac",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "time",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 420,
        "wires": [
            [
                "672f1cb1f5067d8d"
            ]
        ]
    },
    {
        "id": "2f968b0a1dfe1c5d",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sleep-input-hour",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 460,
        "wires": [
            [
                "672f1cb1f5067d8d"
            ]
        ]
    },
    {
        "id": "d67d9b8ef87d2675",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "sleep-input-min",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 500,
        "wires": [
            [
                "672f1cb1f5067d8d"
            ]
        ]
    },
    {
        "id": "aa651b8b417f0873",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "time",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 280,
        "wires": [
            [
                "48c5ed161b9fb210"
            ]
        ]
    },
    {
        "id": "878bd7e0aa95eda4",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "alarm-input-hour",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 320,
        "wires": [
            [
                "48c5ed161b9fb210"
            ]
        ]
    },
    {
        "id": "b319fb9bbedca6bb",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "alarm-input-min",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 360,
        "wires": [
            [
                "48c5ed161b9fb210"
            ]
        ]
    },
    {
        "id": "4c4f92a2bd23bf83",
        "type": "function",
        "z": "4c5f97a5f0e24b71",
        "name": "AuthSwitch",
        "func": "if (!global.get('authenticated')) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "4eb1e901339c96ed"
            ]
        ]
    },
    {
        "id": "2b071609943fe19c",
        "type": "function",
        "z": "4c5f97a5f0e24b71",
        "name": "AuthSwitch",
        "func": "if (!global.get('authenticated')) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 320,
        "wires": [
            [
                "b66a63aa1aa086bb"
            ]
        ]
    },
    {
        "id": "47c4f0cd61a182ad",
        "type": "function",
        "z": "4c5f97a5f0e24b71",
        "name": "AuthSwitch",
        "func": "if (!global.get('authenticated')) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 460,
        "wires": [
            [
                "7fdcc03bfb161ce9"
            ]
        ]
    },
    {
        "id": "3258e9215e94e367",
        "type": "link in",
        "z": "4c5f97a5f0e24b71",
        "name": "link in 1",
        "links": [
            "749a4c73a1387e12"
        ],
        "x": 215,
        "y": 140,
        "wires": [
            [
                "415aa5547f155409",
                "8d4b64871d58fad4"
            ]
        ]
    },
    {
        "id": "862cceed7a589cbd",
        "type": "link in",
        "z": "4c5f97a5f0e24b71",
        "name": "link in 5",
        "links": [
            "2cda573f06ebdbc4"
        ],
        "x": 205,
        "y": 20,
        "wires": [
            [
                "0af2fe2bf2c56dc1",
                "7c9beffa390f6cb7"
            ]
        ]
    },
    {
        "id": "7c9beffa390f6cb7",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sleep Quality",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 60,
        "wires": [
            [
                "c386d072d7ba57d6"
            ]
        ]
    },
    {
        "id": "8d4b64871d58fad4",
        "type": "change",
        "z": "4c5f97a5f0e24b71",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Environement Quality",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "c386d072d7ba57d6"
            ]
        ]
    },
    {
        "id": "415aa5547f155409",
        "type": "function",
        "z": "4c5f97a5f0e24b71",
        "name": "buffering and calculate average",
        "func": "let buffer = flow.get(\"buffer\")\nif ( ! buffer ) {\n    buffer = [];\n}\nif(msg.payload){\n    buffer.push(msg.payload);\n    let envAvg = buffer.reduce((a, b) => a + b) / buffer.length;\n    global.set(\"EnvAvg\", envAvg )\n    flow.set(\"buffer\", buffer);\n    return {payload:envAvg.toFixed(2)};\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "947c4744d8311da6"
            ]
        ]
    },
    {
        "id": "0af2fe2bf2c56dc1",
        "type": "function",
        "z": "4c5f97a5f0e24b71",
        "name": "buffering and calculate average",
        "func": "let buffer = flow.get(\"buffersl\")\nif ( ! buffer ) {\n    buffer = [];\n}\nif(msg.payload){\n    buffer.push(msg.payload);\n    let sleepQualityAvg = buffer.reduce((a, b) => a + b) / buffer.length;\n    global.set(\"sleepQualityAvg\", sleepQualityAvg )\n    flow.set(\"buffersl\", buffer);\n    return {payload:sleepQualityAvg.toFixed(2)};\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 20,
        "wires": [
            [
                "ccda619479c0b739"
            ]
        ]
    },
    {
        "id": "a1b2c3d4e5f6a7b8",
        "type": "mqtt in",
        "z": "cloud-sync-flow",
        "name": "Listen for ESP32 Sensor Data",
        "topic": "23127302/sense",
        "qos": "2",
        "datatype": "json",
        "broker": "07391ca88541455f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "b1c2d3e4f5a6b7c8"
            ]
        ]
    },
    {
        "id": "b1c2d3e4f5a6b7c8",
        "type": "function",
        "z": "cloud-sync-flow",
        "name": "Build & Update Sensor JSON",
        "func": "// --- Cấu hình ---\n// Giới hạn số lượng điểm dữ liệu cho mỗi loại để file JSON không quá lớn\nconst MAX_DATA_POINTS = 100;\n\n// --- Bắt đầu xử lý ---\n\n// Lấy đối tượng JSON tổng hợp từ 'flow context' (bộ nhớ của luồng)\n// Nếu chưa có, tạo một đối tượng rỗng\nlet sensorData = flow.get(\"sensorData\") || {\n    temperature: [],\n    humidity: [],\n    light: [],\n    movement: [],\n    overallQuality: []\n};\n\n// Lấy dữ liệu mới từ ESP32 (msg.payload)\nconst newData = msg.payload;\n\n// Lấy timestamp, giả sử ESP32 gửi unixtime\nconst timestamp = newData.timestamp; \n\n// Hàm trợ giúp để thêm dữ liệu mới và xóa dữ liệu cũ\nfunction updateDataArray(arr, value) {\n    if (value !== undefined && value !== null) {\n        arr.push({ x: timestamp, y: value });\n        // Nếu mảng dài hơn giới hạn, xóa phần tử đầu tiên (cũ nhất)\n        if (arr.length > MAX_DATA_POINTS) {\n            arr.shift();\n        }\n    }\n}\n\n// Cập nhật từng mảng dữ liệu với giá trị mới\nupdateDataArray(sensorData.temperature, newData.temp);\nupdateDataArray(sensorData.humidity, newData.humidity);\nupdateDataArray(sensorData.light, newData.lightlevel);\n\n// Tính toán và cập nhật overallQuality (dựa trên công thức trong file flows.json của bạn)\nconst quality = Math.max(0, 100 - Math.abs(newData.temp - 24) - Math.abs(newData.humidity - 60) - newData.lightlevel) / 10;\nupdateDataArray(sensorData.overallQuality, quality);\n\n// Lưu lại đối tượng JSON đã cập nhật vào bộ nhớ của luồng\nflow.set(\"sensorData\", sensorData);\n\n// Gán đối tượng hoàn chỉnh này vào msg.payload để gửi tới Firebase\nmsg.payload = sensorData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "c1d2e3f4a5b6c7d8"
            ]
        ]
    },
    {
        "id": "c1d2e3f4a5b6c7d8",
        "type": "firebase modify",
        "z": "cloud-sync-flow",
        "name": "Save to Firebase",
        "method": "set",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "9d61f778729958bb",
        "type": "inject",
        "z": "cloud-sync-flow",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temp\":25.5,\"humidity\":68,\"lightlevel\":350,\"timestamp\":1755608230}",
        "payloadType": "json",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "b1c2d3e4f5a6b7c8"
            ]
        ]
    }
]